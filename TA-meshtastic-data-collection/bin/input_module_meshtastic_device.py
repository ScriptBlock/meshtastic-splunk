


# encoding = utf-8

import os
import sys
import time
import shlex
import datetime
import subprocess
try:
    import HTMLParser
except ImportError:
    from html import parser as HTMLParser
import mako.template

from splunklib import modularinput as smi

'''
    This file is auto generated by Add-on Builder.
    Do not edit this file!!! It will be overwritten
    by Add-on Builder.
'''
def get_input_arguments():
    arguments = []
    arguments.append(smi.Argument("device_ip", title="Device IP",
                                     description="",
                                     required_on_create=True,
                                     required_on_edit=False))
    arguments.append(smi.Argument("script_timeout", title="Script Timeout",
                                     description="The script is smart enough to know if a copy of itself is already running.  Use this timeout to shut down the script and allow the normal input interval to restart the script.",
                                     required_on_create=False,
                                     required_on_edit=False))
    arguments.append(smi.Argument("collect_node_info_", title="Collect Node Info?",
                                     description="",
                                     required_on_create=False,
                                     required_on_edit=False))
    arguments.append(smi.Argument("node_info_interval", title="Node Info Interval",
                                     description="",
                                     required_on_create=True,
                                     required_on_edit=False))
    arguments.append(smi.Argument("collect_mesh_info_", title="Collect Mesh Info?",
                                     description="",
                                     required_on_create=False,
                                     required_on_edit=False))
    arguments.append(smi.Argument("mesh_info_interval", title="Mesh Info Interval",
                                     description="",
                                     required_on_create=True,
                                     required_on_edit=False))
    return arguments

def validate_input(helper, definition):
    """overloaded splunklib modularinput method"""
    pass

def collect_events(helper, ew):
    """overloaded splunklib modularinput method"""
    # use simple rest call to load the events
    command = '$SPLUNK_HOME/etc/apps/TA-meshtastic-data-collection/bin/meshaio.sh ${device_ip} ${collect_node_info_} ${node_info_interval} ${collect_mesh_info_} ${mesh_info_interval}  ${script_timeout}'
    input_name = helper.get_input_type()
    stanzas = helper.get_input_stanza()
    for stanza_name, stanza_params in stanzas.items():
        # should unescape the xml text content
        hparser = HTMLParser.HTMLParser()
        input_params = {}
        for k, v in stanza_params.items():
            input_params[k] = '' if v is None else hparser.unescape(str(v))
        stanza_params = input_params

        output_index = stanza_params['index']
        output_sourcetype = stanza_params['sourcetype']

        # parametrization for the command
        temp = mako.template.Template(command)
        translated_command = temp.render(**stanza_params)

        child = subprocess.Popen(translated_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        events = []
        while child.poll() is None:
            content = child.stdout.read()
            if content:
                events.append(content.decode())
        # read the last part of events
        content = child.stdout.read()
        if content:
            events.append(content.decode())

        if events:
            for e in events[:-1]:
                event = helper.new_event(source=input_name, sourcetype=output_sourcetype, index=output_index, data=e, unbroken=True, done=False)
                ew.write_event(event)
            event = helper.new_event(source=input_name, sourcetype=output_sourcetype, index=output_index, data=events[-1], unbroken=True, done=True)
            ew.write_event(event)

        if child.returncode != 0:
            err_prefix = "Command exit code is {}. Fail to run command '{}'.".format(child.returncode, translated_command)
            errmsg = child.stderr.read().decode()
            if errmsg:
                errmsg = err_prefix + "error message:" + errmsg
            else:
                errmsg = err_prefix
            raise RuntimeError(errmsg)
